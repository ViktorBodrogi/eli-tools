@! This file is Copyright of the author, Viktor Bodrogi, 2016.

@B@<Abstract@>

@$@<TODO@>+=@{
* Cleanup toolchain
* Add standard libraries for filetypes
@}

@C@<Discussion@>

M4 is a simple but useful way to create and use macros
for producing other source types.
This makes it great as a preprocessor.

The most easy way to do it under Eli:

-> @{input.m4 +cmd=m4 +args="--prefix" :stdout@}

But we want a derivation directly in Eli,
defined by a packageand a @{.dg@} file.
So we can:

-> @{input.m4 +prefix :m4@}

Short options are recognised too.

-> @{input.m4 +P :m4@}

Also, we define libraries loaded before the input file,
or a postprocessing script to run:

-> @{input.m4 +pre=(preamble.m4) +post=(postprocess.m4) :m4@}

For special file types we can preload standard libraries for that type.

-> @{input.fw.m4 :fw@}
# (This preloads the @{fw.m4@} file from the distribution package)

All m4 files preloads the @{std.m4@} library, except @{+nostd@} flag given.

File types we want to handle:
@{.m4@}
@{.fw.m4 .fwi.m4@}
@{,fw ,fwi@}

And these are possible also:
@{.*.m4@}?
@{,c ,h@}?
@{,*@}?

@C
@$@<TODO@>+=@{
* Short options are recognised too
* Preload/Postscript
* Standard preloading
* File types
@}
