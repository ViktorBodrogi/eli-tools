# m4.dg for package M4

# Source Types

*.m4    => :m4_in;
*,fw    => :m4_fw;
*.fw.m4 => :m4_fw;

# Input Object Types

:m4_in  'm4 input file' => :FILE;
:m4_fw  'm4 coded fw' => :FILE;

# Intermediate Object Types

# Output Object Types

:out.m4 'm4 pipe output'        => :PIPE;
:gnc.m4 'm4 generic output'     => :GENERIC;
:fw     'FunnelWeb output'?     => :FILE;

# Parameter Types

+home 'home directory for relative pathnames'? => :first;
+inc_sp 'name of a directory in an include search path'? => :ls;
+error 'Error warnings'? => :first;
+fatal 'Fatal warnings'? => :first;
+prefix 'Prefix builtins with m4_'? => :first;
+quiet 'Suppress warnings'? => :first;
+macro 'Issue a warning ob regexp'? => :first;
+word 'Use regexp as an alternative syntax for macro names'? => :first;
+interactive 'Makes this invocation of m4 interactive'? => :first;
+define 'Define macro'? => :cat;
+include 'Include directory'? => :first;
+synclines 'Generate synchronization lines'? => :first;
+undefine 'Deletes any predefined meaning name might have'? => :first;
+gnu 'Enable all the extensions in this implementation'? => :first;
+traditional 'Suppress all the extensions made in this implementation'? => :first;
+hashsize 'Set the internal hash table size'? => :first;
+nesting 'Limit the nesting of macro calls to num levels'? => :first;
+freeze 'Freeze state in file'? => :first;
+reload 'Recover state from file'? => :first;
+debug 'Set the debug-level according to the flags'? => :first;
+debugfile 'Redirect dumpdef output, debug messages, and trace output to the named file'? => :first;
+arglength 'Restrict the size of the output generated by macro tracing'? => :first;
+trace 'This enables tracing for the macro name'? => :first;


# Environment Variables


$ODIN_M4        'name of the M4 processor' = 'm4';
$ODIN_M4_FLAGS  'M4 flags' = '';

# Tools

EXEC (m4.sh) m4 (:FILE) (:FILE:dir)@  (+inc_sp) (+error) (+fatal) (+prefix) (+quiet) (+macro) (+word) (+interactive) (+define) (+include) (+synclines) (+undefine) (+gnu) (+traditional) (+hashsize) (+nesting) (+freeze) (+reload) (+debug) (+debugfile) (+arglength) (+trace)
    => (:m4);


EXEC (m4.sh) out.m4 (:FILE) (:FILE :dir)@  (+inc_sp) (+error) (+fatal) (+prefix) (+quiet) (+macro) (+word) (+interactive) (+define) (+include) (+synclines) (+undefine) (+gnu) (+traditional) (+hashsize) (+nesting) (+freeze) (+reload) (+debug) (+debugfile) (+arglength) (+trace)
    => (:out.m4);

EXEC (m4.sh) gnc.m4 (:m4_in) (:m4_in :dir)@  (+inc_sp) (+error) (+fatal) (+prefix) (+quiet) (+macro) (+word) (+interactive) (+define) (+include) (+synclines) (+undefine) (+gnu) (+traditional) (+hashsize) (+nesting) (+freeze) (+reload) (+debug) (+debugfile) (+arglength) (+trace)
    => (:gnc.m4);

EXEC (m4.sh) fw (:m4_in) (:m4_in :dir)@  (+inc_sp) (+error) (+fatal) (+prefix) (+quiet) (+macro) (+word) (+interactive) (+define) (+include) (+synclines) (+undefine) (+gnu) (+traditional) (+hashsize) (+nesting) (+freeze) (+reload) (+debug) (+debugfile) (+arglength) (+trace)
    => (:fw);


